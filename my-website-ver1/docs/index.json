[{"content":"昨天  嘗試了把這個舊網站重新上線未果。\n今天花了不少時間終於發現問題了！因為使用hugo指令產生靜態網頁的結果之間的超連結都會以發布的網址最為 baseURL，所以在本機端只能利用hugo server指令預覽結果。\n另外，將網頁發佈到 Github Page 時，在完成 Push 之後需要一段時間資料才會被放到 Server 上，所以會有一段時間差才會完成更新！這個現象似乎有在計網概提過 🤔\n\u0026hellip;\n最近，我囫圇吞棗的在 Codecademy 上學了不少東西，但是發現 HTML 和 CSS 還是不太熟悉，再加上 Javascript 的話，可能就會一團混亂，雖然課程中有安排 project，但我覺得練習量還是不夠。因為最近常在用Monkeytype  和keybr  練習打字，也有找到 Microsoft 的課程Web-Dev-For-Beginners  其中有個部分就是實作簡單的 typing test。大概會用個幾天把這個 side project 做出來，也應該會寫點記錄。\n","permalink":"https://kkkeevvvin.github.io/my-website-ver1/docs/posts/republish-old-web/","summary":"昨天  嘗試了把這個舊網站重新上線未果。\n今天花了不少時間終於發現問題了！因為使用hugo指令產生靜態網頁的結果之間的超連結都會以發布的網址最為 baseURL，所以在本機端只能利用hugo server指令預覽結果。\n另外，將網頁發佈到 Github Page 時，在完成 Push 之後需要一段時間資料才會被放到 Server 上，所以會有一段時間差才會完成更新！這個現象似乎有在計網概提過 🤔\n\u0026hellip;\n最近，我囫圇吞棗的在 Codecademy 上學了不少東西，但是發現 HTML 和 CSS 還是不太熟悉，再加上 Javascript 的話，可能就會一團混亂，雖然課程中有安排 project，但我覺得練習量還是不夠。因為最近常在用Monkeytype  和keybr  練習打字，也有找到 Microsoft 的課程Web-Dev-For-Beginners  其中有個部分就是實作簡單的 typing test。大概會用個幾天把這個 side project 做出來，也應該會寫點記錄。","title":"[隨筆] 把舊網站重新上線"},{"content":"從上次更新到寫這篇文章的當下，已經不知不覺地過了兩年。\n之間發生了好多事。\n\u0026hellip;\n因為已經把這個 repo 的 github page 拿掉，差點忘了怎麼 run 他的 server。\n最近在 codecademy 選了 Full-stack Engineer Path 學學前後端，想到自己曾經做過這個東西，也覺得應該要寫點筆記，既然要寫就想說寫好一點順便放在個人網站以後當履歷 XD\n\u0026hellip;\n嘗試了一下，發現不知道為什麼沒有辦法生成靜態網頁。\n那就先當作是我的記事本吧~~ 剩下的有空再說！\n","permalink":"https://kkkeevvvin.github.io/my-website-ver1/docs/posts/after-a-long-time/","summary":"從上次更新到寫這篇文章的當下，已經不知不覺地過了兩年。\n之間發生了好多事。\n\u0026hellip;\n因為已經把這個 repo 的 github page 拿掉，差點忘了怎麼 run 他的 server。\n最近在 codecademy 選了 Full-stack Engineer Path 學學前後端，想到自己曾經做過這個東西，也覺得應該要寫點筆記，既然要寫就想說寫好一點順便放在個人網站以後當履歷 XD\n\u0026hellip;\n嘗試了一下，發現不知道為什麼沒有辦法生成靜態網頁。\n那就先當作是我的記事本吧~~ 剩下的有空再說！","title":"[隨筆] 過了好久好久..."},{"content":"前言 現在的日常生活應該少不了電腦和手機，大家應該會很習慣使用「圖形使用者界面（GUI, Graph User Interface）」。我們可以回想平常都是怎麼使用手機或電腦，我們會看著螢幕中的各種圖示，藉由觸控螢幕、滑鼠或觸控板的操作，得到我們想要的結果，比如說打開應用程式或瀏覽網頁之類的。我們就是依靠「圖形使用者界面」才能這麼做的。\n把「圖形使用者界面」這個詞拆開來解釋，「圖形」是我們看到的那些視窗、按鈕、圖示、工具列和選單等等；「使用者界面」則是電腦和我們人類使用者互動的媒介。\n然而，使用者界面並不是一開始就是圖形使用者界面。在電腦剛出現的年代是沒有滑鼠的，也沒有強大的運算能力和記憶體可以支援精美的畫面，所以這時候的使用者界面是「命令列界面（CLI, Command-Line Interface）」。\n命令列界面 如果有看過經典電影《駭客任務》（The Matrix），應該對下面的畫面印象深刻。沒有看過的人可以找個機會去看，你不會後悔的！這個畫面可能會讓人覺得駭客很酷，他們的電腦會閃閃發光，總是在做無法讓人理解的事情。\n但是，駭客或是各種資訊相關工程師他們經常會用到的東西不是長那樣，其實長這樣：\n這個東西就是命令列界面。\n使用命令列界面，其實跟使用圖形使用者界面很像，我們的最終目的都是要電腦乖乖聽話，服從我們的指令。在圖形使用者界面中，我們的指令就是點擊螢幕上的某個位置或是其他操作，電腦會做出相對的回應；在命令列界面中，我們的指令會是各種字元的組合，按下Enter之後我們也能得到相應的結果，像是上面那張圖片裡會輸出幾行文字。\nWhy CLI  節省電腦資源，電腦運行的速度變快 熟習操作以後，可以減少使用滑鼠，節省時間 方便處理重複且大量的檔案 可以更精確的使用電腦 在自己的電腦上擁有更大的權限 增加電腦使用方式的多樣性  打開命令列界面 這邊介紹在Windows和Linux底下打開命令列界面的方法：\nWindows Windows下面有兩種原生的命令列界面cmd(Command Prompt,命令提示字元)和PowerShell。後者是Windows開發來取代前者的，詳見官網文章  。\n要開啟這兩種界面，首先按下win鍵打開找到搜尋框：\n接著，鍵入cmd或PowerShell找到並且按下Enter執行：\n但是，這個些並不是今天要介紹的主角，筆者也沒有深入研究過。\nLinux 我們來看看在Linux底下的命令列界面，它叫做終端機Terminal，跟使用windows一樣，我們在按下Super鍵（沒錯就是Win鍵）叫出搜尋框，搜尋Terminal，按下Enter，下圖以Ubuntu做示範。\n我們可以用指令：\necho $SHELL 可以看出來使用的是哪一種Shell，Shell簡單來說就是指令的解釋器，Shell有很多種類，這裡可以看出來我們使用的是Bash。（其他方法  ）\nBash 當我們學習電腦的一個新東西時，我們都希望它不會一直變來變去，不會過時，有越多人在維護越好。\nBash目前是自由軟體基金會(FSF, Free Software Foundation)  的GNU計畫  維護的專案。自由軟體  ，根據自由軟體基金會對其的定義，是一類可以不受限制地自由使用、複製、研究、修改和分發的，尊重使用者自由的軟體。GNU計劃的目標是建立一套完全自由的作業系統，同時開發了大批其他的自由軟體，Bash是其中之一。\nBash有許多優點和廣大的社群支持，筆者認為如果有心學習，在網路上可以找到許多資源。\n玩個遊戲吧 學習新東西總是讓人無力，沒關係，這裡準備了一個遊戲叫做Bashcrawl，在筆者的另一篇文章有詳細的介紹：[遊戲] Bashcrawl介紹  。\n 參考資料 圖形使用者界面 ｜維基百科  命令列界面 | 維基百科  GUI | Computer Hope  Command line vs. GUI | Computer Hope  ","permalink":"https://kkkeevvvin.github.io/my-website-ver1/docs/posts/intro_cli/","summary":"前言 現在的日常生活應該少不了電腦和手機，大家應該會很習慣使用「圖形使用者界面（GUI, Graph User Interface）」。我們可以回想平常都是怎麼使用手機或電腦，我們會看著螢幕中的各種圖示，藉由觸控螢幕、滑鼠或觸控板的操作，得到我們想要的結果，比如說打開應用程式或瀏覽網頁之類的。我們就是依靠「圖形使用者界面」才能這麼做的。\n把「圖形使用者界面」這個詞拆開來解釋，「圖形」是我們看到的那些視窗、按鈕、圖示、工具列和選單等等；「使用者界面」則是電腦和我們人類使用者互動的媒介。\n然而，使用者界面並不是一開始就是圖形使用者界面。在電腦剛出現的年代是沒有滑鼠的，也沒有強大的運算能力和記憶體可以支援精美的畫面，所以這時候的使用者界面是「命令列界面（CLI, Command-Line Interface）」。\n命令列界面 如果有看過經典電影《駭客任務》（The Matrix），應該對下面的畫面印象深刻。沒有看過的人可以找個機會去看，你不會後悔的！這個畫面可能會讓人覺得駭客很酷，他們的電腦會閃閃發光，總是在做無法讓人理解的事情。\n但是，駭客或是各種資訊相關工程師他們經常會用到的東西不是長那樣，其實長這樣：\n這個東西就是命令列界面。\n使用命令列界面，其實跟使用圖形使用者界面很像，我們的最終目的都是要電腦乖乖聽話，服從我們的指令。在圖形使用者界面中，我們的指令就是點擊螢幕上的某個位置或是其他操作，電腦會做出相對的回應；在命令列界面中，我們的指令會是各種字元的組合，按下Enter之後我們也能得到相應的結果，像是上面那張圖片裡會輸出幾行文字。\nWhy CLI  節省電腦資源，電腦運行的速度變快 熟習操作以後，可以減少使用滑鼠，節省時間 方便處理重複且大量的檔案 可以更精確的使用電腦 在自己的電腦上擁有更大的權限 增加電腦使用方式的多樣性  打開命令列界面 這邊介紹在Windows和Linux底下打開命令列界面的方法：\nWindows Windows下面有兩種原生的命令列界面cmd(Command Prompt,命令提示字元)和PowerShell。後者是Windows開發來取代前者的，詳見官網文章  。\n要開啟這兩種界面，首先按下win鍵打開找到搜尋框：\n接著，鍵入cmd或PowerShell找到並且按下Enter執行：\n但是，這個些並不是今天要介紹的主角，筆者也沒有深入研究過。\nLinux 我們來看看在Linux底下的命令列界面，它叫做終端機Terminal，跟使用windows一樣，我們在按下Super鍵（沒錯就是Win鍵）叫出搜尋框，搜尋Terminal，按下Enter，下圖以Ubuntu做示範。\n我們可以用指令：\necho $SHELL 可以看出來使用的是哪一種Shell，Shell簡單來說就是指令的解釋器，Shell有很多種類，這裡可以看出來我們使用的是Bash。（其他方法  ）\nBash 當我們學習電腦的一個新東西時，我們都希望它不會一直變來變去，不會過時，有越多人在維護越好。\nBash目前是自由軟體基金會(FSF, Free Software Foundation)  的GNU計畫  維護的專案。自由軟體  ，根據自由軟體基金會對其的定義，是一類可以不受限制地自由使用、複製、研究、修改和分發的，尊重使用者自由的軟體。GNU計劃的目標是建立一套完全自由的作業系統，同時開發了大批其他的自由軟體，Bash是其中之一。\nBash有許多優點和廣大的社群支持，筆者認為如果有心學習，在網路上可以找到許多資源。\n玩個遊戲吧 學習新東西總是讓人無力，沒關係，這裡準備了一個遊戲叫做Bashcrawl，在筆者的另一篇文章有詳細的介紹：[遊戲] Bashcrawl介紹  。\n 參考資料 圖形使用者界面 ｜維基百科  命令列界面 | 維基百科  GUI | Computer Hope  Command line vs.","title":"[入門] 圖形使用者界面與命令列界面"},{"content":"簡介 這是一個純文字的地牢遊戲，他的呈現方式非常有趣，是用目錄和文件來代表房間和提示，遊玩的方式是用Bash的指令，很適合Bash的初學者玩，在遊戲的過程中，還可以學習到不同的指令使用方式。\n在開始之前 我們的電腦之中必須有Bash或Zsh  。Linux, BSD和MacOS這些作業系統預設都包含Bash，可以跳過接下來這段。\n在Windows安裝Bash 雖然Windows裡面沒有Bash，但是我們有許多方式  可以在Windows中安裝Bash。這邊將介紹如何使用Cygwin  。\n首先點擊下載setup-x86_64.exe  ，或是到官網  找到適合的版本。\n下載好後，按下開啟檔案或是到下載的資料夾中雙擊那個檔案，會出現一個對話框，按下「是」。\n然後是Cygwin Setup的頁面：\n不斷的按下一步，直到Choose A Download Site的頁面，這裡隨便挑一個就可以。\n接下來會出現Select Packages的頁面，左上角有一個View的選單，選擇Full。在Search的框框中輸入Bash，按下Enter應該就可以看到下圖。最上面的Package就是Bash，在New的那一欄選擇最新的版本，點擊Src?那一欄的框框把它打勾，最後再按個幾次下一步，就會開始安裝。\n結束安裝之後會出現下圖，按下完成。\n桌面上應該會出現一個圖示，點擊就可以在Windows中使用Bash了。\n安裝Bashcrawl 到官網  或是點擊這裡  下載並且在下載裡面解壓縮，不用更動它的名字。（方便後面的操作。）\n開始遊戲 這邊將以在Windows中使用Cygwin Terminal為例。\n首先打開Cygwin Terminal，會看到：\nblobloblog@MyDesktop ~ $ ＠前面是你的使用者名稱，@後面是你的電腦名稱，隔一個空格是你當前的目錄(也就是資料夾)，~表示是你的家目錄。$後面是你可以輸入指令的地方，按下Enter就可送出你的指令。\n使用指令：\ncd c:Users/\u0026lt;YOUR_USERNAME\u0026gt;/Downloads/bashcrawl-master cd是change directory切換目錄，是將你的目錄切換到後面指令的位置。\n現在，我們已經到了bashcrawl的目錄，輸入指令ls，會出現當前目錄下的檔案：\nblobloblog@MyDesktop /cygdrive/c/Users/blobloblog/Downloads/bashcrawl-master $ ls entrance LICENSE README.md 有一檔案寫著README.md，使用指令cat將他所有的內容輸出在終端機中：\ncat README.md 或是使用less，可以用方向鍵瀏覽文件內容，按下q離開：\nless README.md 仔細閱讀README.md，然後使用以下指令開始遊戲：\ncd entrance/ 祝大家玩的愉快 ଘ(੭ˊᵕˋ)੭* ੈ✩\n參考文件 https://marlborough-college.gitbook.io/attic-lab/the-terminal/games/level-1-bashcrawl  ","permalink":"https://kkkeevvvin.github.io/my-website-ver1/docs/posts/bashcrawl/","summary":"簡介 這是一個純文字的地牢遊戲，他的呈現方式非常有趣，是用目錄和文件來代表房間和提示，遊玩的方式是用Bash的指令，很適合Bash的初學者玩，在遊戲的過程中，還可以學習到不同的指令使用方式。\n在開始之前 我們的電腦之中必須有Bash或Zsh  。Linux, BSD和MacOS這些作業系統預設都包含Bash，可以跳過接下來這段。\n在Windows安裝Bash 雖然Windows裡面沒有Bash，但是我們有許多方式  可以在Windows中安裝Bash。這邊將介紹如何使用Cygwin  。\n首先點擊下載setup-x86_64.exe  ，或是到官網  找到適合的版本。\n下載好後，按下開啟檔案或是到下載的資料夾中雙擊那個檔案，會出現一個對話框，按下「是」。\n然後是Cygwin Setup的頁面：\n不斷的按下一步，直到Choose A Download Site的頁面，這裡隨便挑一個就可以。\n接下來會出現Select Packages的頁面，左上角有一個View的選單，選擇Full。在Search的框框中輸入Bash，按下Enter應該就可以看到下圖。最上面的Package就是Bash，在New的那一欄選擇最新的版本，點擊Src?那一欄的框框把它打勾，最後再按個幾次下一步，就會開始安裝。\n結束安裝之後會出現下圖，按下完成。\n桌面上應該會出現一個圖示，點擊就可以在Windows中使用Bash了。\n安裝Bashcrawl 到官網  或是點擊這裡  下載並且在下載裡面解壓縮，不用更動它的名字。（方便後面的操作。）\n開始遊戲 這邊將以在Windows中使用Cygwin Terminal為例。\n首先打開Cygwin Terminal，會看到：\nblobloblog@MyDesktop ~ $ ＠前面是你的使用者名稱，@後面是你的電腦名稱，隔一個空格是你當前的目錄(也就是資料夾)，~表示是你的家目錄。$後面是你可以輸入指令的地方，按下Enter就可送出你的指令。\n使用指令：\ncd c:Users/\u0026lt;YOUR_USERNAME\u0026gt;/Downloads/bashcrawl-master cd是change directory切換目錄，是將你的目錄切換到後面指令的位置。\n現在，我們已經到了bashcrawl的目錄，輸入指令ls，會出現當前目錄下的檔案：\nblobloblog@MyDesktop /cygdrive/c/Users/blobloblog/Downloads/bashcrawl-master $ ls entrance LICENSE README.md 有一檔案寫著README.md，使用指令cat將他所有的內容輸出在終端機中：\ncat README.md 或是使用less，可以用方向鍵瀏覽文件內容，按下q離開：\nless README.md 仔細閱讀README.md，然後使用以下指令開始遊戲：\ncd entrance/ 祝大家玩的愉快 ଘ(੭ˊᵕˋ)੭* ੈ✩\n參考文件 https://marlborough-college.","title":"[遊戲] Bashcrawl介紹"},{"content":"前言 留言板在部落格中是不可或缺的一部分，是讀者回饋作者最直接的方式。因為筆者是目前沒有太大的經濟能力，也沒有架設自己的伺服器，所以選用了有免費試用的第三方服務Graphcomment  ，每個月有1,000,000的流量，對小網站來說應該是很夠用了。如果之後要換平台，它也可以匯出所有的留言。\n申請帳號以及設定 Graphcomment可以直接用Google、Twitter或Facebook登入，也可以用電子郵件註冊。\n註冊完以後，按下Add site，會出現一個表單：\n Site name: 一個好記的名字就好，讓你自己容易管理各個網站 Unique ID: 會在之後的部份用到 Website URL: 就是你的網站URL Whitelist domains: 自己決定吧 Supported language: 好像是壞掉了，之後的設定可以再改  勾選我同意服務條款，按下送出，就完成了一個網站留言版後端的建立了。\n接著進入設定，不要點小齒輪圖示，直接點剛才設定的Site name，會進入這個網站留言版後端。點選SETTING，進入Language的頁面選擇留言板的語言，因為沒有繁體中文，所以我是選英文。在Customization頁面中可以調整留言板的顏色，其他的設定也都可以自己調整看看。這個頁面記得先保留，等一下還會用到。\n將Graphcomment加入Hugo 打開config.yml，加入：\nparams: GraphCommentId: \u0026lt;YOUR_UNIQUE_ID\u0026gt; comments: ture #如果哪天想關掉留言板，改成false就行了 在./layouts/partials中，加入或修改comments.html\n{{ if ne .Params.comments false }} {{ if .Site.Params.GraphCommentId }} {{ partial \u0026quot;graphcomment.html\u0026quot; . }} {{ end }} {{ end }} \n接著到留言板後端的SETUP，在側邊連點選Universal code，下面有一些選項可以自行調整，然後複製那一段程式碼，回到./layouts/partials，新增graphcomment.html並且貼上那一段程式碼。\n然後找到下面這行：\ngraphcommentId: \u0026quot;\u0026lt;YOUR_UNIQUE_ID\u0026gt;\u0026quot;, 把他修改成：\ngraphcommentId: {{ .Site.Params.GraphCommentId }}, 記得不要漏掉最後的逗號，因為後面還有其他程式碼需要用逗號隔開。\n如果以後要修改GraphCommentId，只需修改config.yml裡面的。\n接下來找到：\nbehaviour: { // HIGHLY RECOMMENDED // uniq identifer for the comments thread on your page (ex: your page id) 加入下面一行程式碼：\nuid: {{ .RelPermalink }}, 這一個部份非常重要，筆者在複製程式碼時，沒有認真看裡面的註解，是在A小編  的測試之下，發現留言會亂跑到其他篇文章。解決方法就是看清楚註解，加入uid，讓Graphcomment的後端可以分辨是哪一篇文章的留言。\n最後，打開./layouts/_default/single.html（這是文章的基本版型），在自己喜歡的位置加上：\n{{- if (.Param \u0026quot;comments\u0026quot;) }} {{- partial \u0026quot;comments.html\u0026quot; . }} {{- end }} 如果以上的步驟都有正確操作，用hugo server [-d]就可以看到留言版囉✧◝(⁰▿⁰)◜✧\n後記 這是我嘗試的第二個方案，原本是要用staticman + Heroku，但是好麻煩就放棄了。\n但是Graphcomment的載入速度有點慢啊\n(o´Å｀)=з\n參考資料 https://graphcomment.com/  Comments | Hugo  How to get the URL of the current page with the rel or relref function? | Hugo  ","permalink":"https://kkkeevvvin.github.io/my-website-ver1/docs/posts/hugo_graphcomment/","summary":"前言 留言板在部落格中是不可或缺的一部分，是讀者回饋作者最直接的方式。因為筆者是目前沒有太大的經濟能力，也沒有架設自己的伺服器，所以選用了有免費試用的第三方服務Graphcomment  ，每個月有1,000,000的流量，對小網站來說應該是很夠用了。如果之後要換平台，它也可以匯出所有的留言。\n申請帳號以及設定 Graphcomment可以直接用Google、Twitter或Facebook登入，也可以用電子郵件註冊。\n註冊完以後，按下Add site，會出現一個表單：\n Site name: 一個好記的名字就好，讓你自己容易管理各個網站 Unique ID: 會在之後的部份用到 Website URL: 就是你的網站URL Whitelist domains: 自己決定吧 Supported language: 好像是壞掉了，之後的設定可以再改  勾選我同意服務條款，按下送出，就完成了一個網站留言版後端的建立了。\n接著進入設定，不要點小齒輪圖示，直接點剛才設定的Site name，會進入這個網站留言版後端。點選SETTING，進入Language的頁面選擇留言板的語言，因為沒有繁體中文，所以我是選英文。在Customization頁面中可以調整留言板的顏色，其他的設定也都可以自己調整看看。這個頁面記得先保留，等一下還會用到。\n將Graphcomment加入Hugo 打開config.yml，加入：\nparams: GraphCommentId: \u0026lt;YOUR_UNIQUE_ID\u0026gt; comments: ture #如果哪天想關掉留言板，改成false就行了 在./layouts/partials中，加入或修改comments.html\n{{ if ne .Params.comments false }} {{ if .Site.Params.GraphCommentId }} {{ partial \u0026quot;graphcomment.html\u0026quot; . }} {{ end }} {{ end }} \n接著到留言板後端的SETUP，在側邊連點選Universal code，下面有一些選項可以自行調整，然後複製那一段程式碼，回到./layouts/partials，新增graphcomment.html並且貼上那一段程式碼。\n然後找到下面這行：\ngraphcommentId: \u0026quot;\u0026lt;YOUR_UNIQUE_ID\u0026gt;\u0026quot;, 把他修改成：\ngraphcommentId: {{ .Site.Params.GraphCommentId }}, 記得不要漏掉最後的逗號，因為後面還有其他程式碼需要用逗號隔開。","title":"在Hugo網站中加入留言板"},{"content":"前言 網站中少不了的就是超連結(Hyperlink)，網站中的連結也會影響搜尋引擎優化(Search Engine Optimization)，但是這隱含了網站被跨網站腳本攻擊(XSS)的可能性。\nHugo link模板 Hugo渲染link的模板在：\n./layouts/_default/markup/render-link.html 如果沒有，自己新增一個就可以了。在裡面加上：\n\u0026lt;a href=\u0026quot;{{ .Destination | safeURL }}\u0026quot; {{ with .Title}} title=\u0026quot;{{ . }}\u0026quot; {{ end }} {{ if strings.HasPrefix .Destination \u0026quot;http\u0026quot; }} target=\u0026quot;_blank\u0026quot; {{- /* 在新分頁中開啟連結 */ -}} rel=\u0026quot;noopener\u0026quot; {{- /* 避免XSS攻擊 */ -}} {{ end }}\u0026gt; {{ .Text }} \u0026lt;/a\u0026gt; 參考資料 How to Open Link in New Tab | Hugo  A小編  ","permalink":"https://kkkeevvvin.github.io/my-website-ver1/docs/posts/hugo_link/","summary":"前言 網站中少不了的就是超連結(Hyperlink)，網站中的連結也會影響搜尋引擎優化(Search Engine Optimization)，但是這隱含了網站被跨網站腳本攻擊(XSS)的可能性。\nHugo link模板 Hugo渲染link的模板在：\n./layouts/_default/markup/render-link.html 如果沒有，自己新增一個就可以了。在裡面加上：\n\u0026lt;a href=\u0026quot;{{ .Destination | safeURL }}\u0026quot; {{ with .Title}} title=\u0026quot;{{ . }}\u0026quot; {{ end }} {{ if strings.HasPrefix .Destination \u0026quot;http\u0026quot; }} target=\u0026quot;_blank\u0026quot; {{- /* 在新分頁中開啟連結 */ -}} rel=\u0026quot;noopener\u0026quot; {{- /* 避免XSS攻擊 */ -}} {{ end }}\u0026gt; {{ .Text }} \u0026lt;/a\u0026gt; 參考資料 How to Open Link in New Tab | Hugo  A小編  ","title":"Hugo網站的向外連結"},{"content":"Favicon是什麼？ 維基百科  是這麼說的：「Favicon是favorites icon的縮寫，亦被稱為website icon（網站圖示）、page icon（頁面圖示）或urlicon（URL圖示）。Favicon是與某個網站或網頁相關聯的圖示。」\nFavicon可以讓網站更容易被記得，或是在Android或iOS的手機中藉由「加入主畫面」的功能產生一個web app。\nHugo後端的設定 只要在config.yml中加入：\nparams: assets: favicon: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; favicon16x16: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; favicon32x32: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; apple_touch_icon: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; safari_pinned_tab: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; \u0026lt;link / abs url \u0026gt;是你的favicon來源，筆者是使用ICONS8  提供的免費favicon，在這裡直接填入我選擇的favicon的連結。也可以將favicon的檔案儲存在./static裡面，但是可能載入的速度會比較慢。\n可以藉由修改./layouts/partials/head.html更深入的設定favicon的輸出。\n參考文件 Where do I put my favicon with Hugo | stackoverflow  Adding Custom Favicon(s) | PaperMod  A小編  ","permalink":"https://kkkeevvvin.github.io/my-website-ver1/docs/posts/hugo_favicon/","summary":"Favicon是什麼？ 維基百科  是這麼說的：「Favicon是favorites icon的縮寫，亦被稱為website icon（網站圖示）、page icon（頁面圖示）或urlicon（URL圖示）。Favicon是與某個網站或網頁相關聯的圖示。」\nFavicon可以讓網站更容易被記得，或是在Android或iOS的手機中藉由「加入主畫面」的功能產生一個web app。\nHugo後端的設定 只要在config.yml中加入：\nparams: assets: favicon: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; favicon16x16: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; favicon32x32: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; apple_touch_icon: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; safari_pinned_tab: \u0026quot;\u0026lt;link / abs url\u0026gt;\u0026quot; \u0026lt;link / abs url \u0026gt;是你的favicon來源，筆者是使用ICONS8  提供的免費favicon，在這裡直接填入我選擇的favicon的連結。也可以將favicon的檔案儲存在./static裡面，但是可能載入的速度會比較慢。\n可以藉由修改./layouts/partials/head.html更深入的設定favicon的輸出。\n參考文件 Where do I put my favicon with Hugo | stackoverflow  Adding Custom Favicon(s) | PaperMod  A小編  ","title":"在Hugo網站中加入Favicon"},{"content":"什麼是RSS? 下面這個好和弦  的影片裡有詳細的介紹。\n  4:24 開始介紹Newsboat\n安裝Newsboat 如果有安裝snap，可以直接使用\nsudo snap install newsboat 進入程式之後可以按快捷鍵?，查看快捷鍵提示，也可以看#我的Newsboat設定  自訂快捷鍵。\nDistrotube深入解析Newsboat RSS Reader 因為筆者特別喜歡Newsboat的簡潔版面和方便的鍵盤操作，所以另外又找到這個影片，對Newsboat有更進一步的了解。\n  var tag = document.createElement('script'); tag.src = \"https://www.youtube.com/player_api\"; var firstScriptTag = document.getElementsByTagName('script')[0]; firstScriptTag.parentNode.insertBefore(tag, firstScriptTag); var player; function onYouTubePlayerAPIReady() { ytplayer = new YT.Player('ytplayer', { videoId: \"CJXdQTGm1jg\", }); console.log(ytplayer); } function playerSeekTo(player, seconds) { player.seekTo(seconds); }  1:46\n如何編輯 urls\n4:06\n 以下都需要用空格隔開 自訂標題：在網址的後面加上 \u0026ldquo;~\u0026lt;YOUR_CUSTOM_TITLE\u0026gt;\u0026rdquo; 標籤：不需要雙引號，直接輸入你的標籤 註解： \u0026ldquo;!\u0026lt;YOUR_COMMENT\u0026gt;\u0026rdquo;  5:22\nyoutube channel rss feed\n https://www.youtube.com/feeds/videos.xml?channel_id=   https://www.youtube.com/feeds/videos.xml?playlist_id=    7:55\n用comment做分類\n9:33\n更多rss\ngitlab github 在網址後面加上.atom\nsourceforge 在網址後加上/feed\n我的Newsboat設定 因為我是用snap下載，所以我的設定路徑是在~snap/newsboat/4780/.newsboat/config，以下是設定檔的內容：\n# Ubuntu好像只能這樣設定，會用預設的瀏覽器打開 browser \u0026quot;xdg-open\u0026quot; 可以參考這個  。\n找到網站或Podcast的RSS連結 大部分有提供RSS的部落格，都會有一個類似wifi的圖示，那個就是他的RSS連結。如果沒有可以嘗試檢視網頁原始碼，搜尋rss、atom、xml或是url，有很大的機率可以找到。\nPodcast都會用RSS做推播，所以理論上都可以找到各個Podcast的RSS連結。可以用同樣的方法找到RSS連結，但是筆者在Spotify上嘗試過卻找不到。\nPtt看板的RSS連結 https://www.ptt.cc/atom/\u0026lt;BROAD_NAME\u0026gt;.xml Hugo網站的RSS Hugo的RSS模板在layouts/_default/rss.xml。\n產生出來的RSS連結會在https://\u0026lt;WEBSITE_URLS\u0026gt;/index.xml。\n記得把我的部落格  加到你的RSS閱讀器喔～～\n","permalink":"https://kkkeevvvin.github.io/my-website-ver1/docs/posts/rss_newsboat_hugo/","summary":"什麼是RSS? 下面這個好和弦  的影片裡有詳細的介紹。\n  4:24 開始介紹Newsboat\n安裝Newsboat 如果有安裝snap，可以直接使用\nsudo snap install newsboat 進入程式之後可以按快捷鍵?，查看快捷鍵提示，也可以看#我的Newsboat設定  自訂快捷鍵。\nDistrotube深入解析Newsboat RSS Reader 因為筆者特別喜歡Newsboat的簡潔版面和方便的鍵盤操作，所以另外又找到這個影片，對Newsboat有更進一步的了解。\n  var tag = document.createElement('script'); tag.src = \"https://www.youtube.com/player_api\"; var firstScriptTag = document.getElementsByTagName('script')[0]; firstScriptTag.parentNode.insertBefore(tag, firstScriptTag); var player; function onYouTubePlayerAPIReady() { ytplayer = new YT.Player('ytplayer', { videoId: \"CJXdQTGm1jg\", }); console.log(ytplayer); } function playerSeekTo(player, seconds) { player.seekTo(seconds); }  1:46\n如何編輯 urls\n4:06\n 以下都需要用空格隔開 自訂標題：在網址的後面加上 \u0026ldquo;~\u0026lt;YOUR_CUSTOM_TITLE\u0026gt;\u0026rdquo; 標籤：不需要雙引號，直接輸入你的標籤 註解： \u0026ldquo;!\u0026lt;YOUR_COMMENT\u0026gt;\u0026rdquo;  5:22","title":"RSS簡介與Newsboat的使用"},{"content":"首先可以參考Google Analytics GA是什麼？  。\n取得「評估ID」之後，在 config.yml 中加上：\ngoogleAnalytics: \u0026lt;YOUR_TRACKING_ID\u0026gt; 並且在 params 下面加上：\nenv: production 接著去點點看你的網站，如果成功的話可以在GA的頁面，看到活動紀錄。\n","permalink":"https://kkkeevvvin.github.io/my-website-ver1/docs/posts/hugo_ga/","summary":"首先可以參考Google Analytics GA是什麼？  。\n取得「評估ID」之後，在 config.yml 中加上：\ngoogleAnalytics: \u0026lt;YOUR_TRACKING_ID\u0026gt; 並且在 params 下面加上：\nenv: production 接著去點點看你的網站，如果成功的話可以在GA的頁面，看到活動紀錄。","title":"在Hugo網站中加入Google Analytics"},{"content":"不知道什麼是Likecoin的人可以先去看看這篇文章  。\n這篇文章主要是參考Hugo 安裝 LikeCoin 教學 | WANcatServer  。\nHugo 可以使用自訂 Layout 的方式，在不改變主題的情況下改變網站設計，我們可以透過這個方式在每個文章下放置 LikeButton。\n為了覆寫文章輸出的模板，將 theme 的 layouts 資料夾複製到專案目錄下。\ncp -r theme/\u0026lt;YOUR_THEME\u0026gt;/layouts/ . Hugo 中的 Partial 功能，可以讓你建立小模板，嵌入在頁面中。參考文件  。\n在 layouts 的 partials 資料夾建立 likecoin.html，寫入以下內容。你也可以在這裡加上想給讀者看的說明文字（HTML格式）。\n\u0026lt;iframe class=\u0026quot;LikeCoin\u0026quot; height=\u0026quot;235\u0026quot; src=\u0026quot;https://button.like.co/in/embed/{{ .Site.Params.likerID }}/button?referrer={{ .Permalink }}\u0026quot; width=\u0026quot;100%\u0026quot; frameborder=0\u0026gt;\u0026lt;/iframe\u0026gt; 接下來在 config.yml 的params後面加入\nlikerID = \u0026quot;\u0026lt;your liker id\u0026gt;\u0026quot; 接著編輯文章使用的模板，通常是 _default/single.html。這就是一個 Go Template，在你想要的地方插入：\n{{ partial \u0026quot;likecoin.html\u0026quot; . }} 建議插在 {{ .Content }} 後面，Like Button 就會接在文章後面。\nGo Template裡面有很多花括號，讓人眼花撩亂，我使用的主題在 {{ .Content }} 附近的程式碼如下：\n \u0026lt;div class=\u0026quot;post-content\u0026quot;\u0026gt; {{- if not (.Param \u0026quot;disableAnchoredHeadings\u0026quot;) }} {{- partial \u0026quot;anchored_headings.html\u0026quot; .Content -}} {{- else }}{{ .Content }}{{ end }} \u0026lt;!-- likecoin below --\u0026gt; {{ partial \u0026quot;likecoin.html\u0026quot; . }} \u0026lt;/div\u0026gt; 如果把上述那段程式碼緊接著插入在 {{ .Content }}後，會造成LikeButton有時候不會出現。Go語言的程式邏輯和大多數的程式語言都一樣，在插入時要看清楚附近的程式碼。\n這樣 Hugo 就會將 likecoin 這個 partial render 到你的文章中了。記得加上 “.\u0026quot;，沒有的話，likecoin 的模板讀不到資料。整個過程都不需要動到 theme 的原始程式。\n最後，執行 hugo server 預覽你的網站。\n 本著作係採用創用 CC 姓名標示-相同方式分享 3.0 台灣 授權條款授權.\n","permalink":"https://kkkeevvvin.github.io/my-website-ver1/docs/posts/hugo_likebutton/","summary":"不知道什麼是Likecoin的人可以先去看看這篇文章  。\n這篇文章主要是參考Hugo 安裝 LikeCoin 教學 | WANcatServer  。\nHugo 可以使用自訂 Layout 的方式，在不改變主題的情況下改變網站設計，我們可以透過這個方式在每個文章下放置 LikeButton。\n為了覆寫文章輸出的模板，將 theme 的 layouts 資料夾複製到專案目錄下。\ncp -r theme/\u0026lt;YOUR_THEME\u0026gt;/layouts/ . Hugo 中的 Partial 功能，可以讓你建立小模板，嵌入在頁面中。參考文件  。\n在 layouts 的 partials 資料夾建立 likecoin.html，寫入以下內容。你也可以在這裡加上想給讀者看的說明文字（HTML格式）。\n\u0026lt;iframe class=\u0026quot;LikeCoin\u0026quot; height=\u0026quot;235\u0026quot; src=\u0026quot;https://button.like.co/in/embed/{{ .Site.Params.likerID }}/button?referrer={{ .Permalink }}\u0026quot; width=\u0026quot;100%\u0026quot; frameborder=0\u0026gt;\u0026lt;/iframe\u0026gt; 接下來在 config.yml 的params後面加入\nlikerID = \u0026quot;\u0026lt;your liker id\u0026gt;\u0026quot; 接著編輯文章使用的模板，通常是 _default/single.html。這就是一個 Go Template，在你想要的地方插入：\n{{ partial \u0026quot;likecoin.html\u0026quot; . }} 建議插在 {{ .Content }} 後面，Like Button 就會接在文章後面。","title":"在Hugo網站中加入LikeButton"},{"content":"建立 Github repository 登入 Github 的網頁，右上角會看到：\n點擊加號，再點擊New repository：\n出現建立的表單：\n如果是要作為主要的個人網站，Repository name 建議可以使用\u0026lt;USERNAME\u0026gt;.github.io。如果你的 github repo 是命名成\u0026lt;USERNAME\u0026gt;.github.io的話，你的網頁就會發布在\u0026lt;USERNAME\u0026gt;.github.io；如果不是，會在\u0026lt;USERNAME\u0026gt;.github.io/\u0026lt;your_repo\u0026gt;\n勾選Public，只有付費版本可以用Private的 repository 來建立 Github Page。其餘的選項可以自行決定。\n最後按下Create repository。\n上傳到 Github repository 如果沒有使用過 git，可以先參考Git 教學(1) : Git 的基本使用  ，完成你的 git 設定。\n這裡以 hugo 專案預設的存檔路徑./public為例。\n移動到public底下，開始用 git 管理這個資料夾：\ngit init 將所有檔案加入管理：\ngit add . 提交修改：\ngit commit -m \u0026quot;first commit\u0026quot; 連上自己的 github repo，並且做確認：\ngit remote add origin https://github.com/\u0026lt;USERNAME\u0026gt;/\u0026lt;your_repo\u0026gt;.git git remote -v 強制把現在的branch變成main。\ngit branch -M main 然後安裝並登入 GitHub Desktop（因為筆者不會設定登入認證），接著 add local repository，找到public這個資料夾。\ncommit之後就可以push到你的 Github 了。\n查看你的網頁 在完成上面的內容以後，打開你的 repo 的設定：\n在左邊的欄位中找到Pages：\n會出現綠色提示框：\n如果其他部份都設定成功，點擊提示框中的超連結，就可以看到跟hugo server產生一樣的網頁了（可能要等伺服器更新）。\n之後 如果有更動，回到專案目錄用hugo產生好網頁，接著到 GitHub Desktop 一樣是用commit和push就可以了。\n參考文件： Build a Personal Website With Github Pages and Hugo  git \u0026amp;ndash;local-branching-on-the-cheap  Adding an existing project to GitHub using the command line  ","permalink":"https://kkkeevvvin.github.io/my-website-ver1/docs/posts/hugo_on_github_page/","summary":"建立 Github repository 登入 Github 的網頁，右上角會看到：\n點擊加號，再點擊New repository：\n出現建立的表單：\n如果是要作為主要的個人網站，Repository name 建議可以使用\u0026lt;USERNAME\u0026gt;.github.io。如果你的 github repo 是命名成\u0026lt;USERNAME\u0026gt;.github.io的話，你的網頁就會發布在\u0026lt;USERNAME\u0026gt;.github.io；如果不是，會在\u0026lt;USERNAME\u0026gt;.github.io/\u0026lt;your_repo\u0026gt;\n勾選Public，只有付費版本可以用Private的 repository 來建立 Github Page。其餘的選項可以自行決定。\n最後按下Create repository。\n上傳到 Github repository 如果沒有使用過 git，可以先參考Git 教學(1) : Git 的基本使用  ，完成你的 git 設定。\n這裡以 hugo 專案預設的存檔路徑./public為例。\n移動到public底下，開始用 git 管理這個資料夾：\ngit init 將所有檔案加入管理：\ngit add . 提交修改：\ngit commit -m \u0026quot;first commit\u0026quot; 連上自己的 github repo，並且做確認：\ngit remote add origin https://github.com/\u0026lt;USERNAME\u0026gt;/\u0026lt;your_repo\u0026gt;.git git remote -v 強制把現在的branch變成main。\ngit branch -M main 然後安裝並登入 GitHub Desktop（因為筆者不會設定登入認證），接著 add local repository，找到public這個資料夾。","title":"將網頁發佈到Github Page"},{"content":"安裝Hugo 這篇以支援snap的Linux版本為例，下載擴充版本的Hugo。\nsnap install hugo --channel=extended 其他作業系統可以到 Install Hugo | Hugo  找到相應的指示安裝。\n檢查是否安裝成功：\nhugo version  若要解除安裝：\nsnap remove hugo \n開始網頁專案 確定安裝好Hugo之後，選好要存放網頁專案的目錄，用指令\n hugo new site mywebsite -f yml  mywebsite可以替換成其他你想要的名字。 -f yml指定使用yml格式，因為yml/yaml的格式比起toml更容易閱讀，根據Papermod的作者adityatelange  的說法  ，所以以下也將採用yml的格式。如果有需要，你可以很容易的找到YML to TOML  的轉換器。   可以看到hugo幫你建立好的檔案架構如下。\nmywebsite/ ├── archetypes │ └── default.md ├── config.yml ├── content ├── data ├── layouts ├── static └── themes 選擇主題 我選擇的主題是PaperMod  ，因為這個主題裡面有很不錯的指引，也有舒服的版面設計。\n移動到mywebsite底下執行以下指令，把PaperMod的資料複製到mywebsite/themes/PaperMod。\ngit clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1 接著打開mywebsite/config.yml在最後加入\ntheme: \u0026quot;PaperMod\u0026quot; \n新增文章 hugo new posts/my-first-post.md 新增的文章會出現在mywebsite/content/posts/之下。你可以試著更動my-first-post.md，一開始會長這樣：\n--- title: \u0026quot;My First Post\u0026quot; date: 2019-03-26T08:47:11+01:00 draft: true ---  這篇文章如果是草稿就不會發布；如果你想要發布，把它改成draft: false。\n 文章的內容寫在下面的---下面，語法可以參考Basic Syntax | Markdown Guide  。\n在本機端預覽 在本機開啟一個網頁伺服器：\n hugo server  在最後加上-D，可以預覽草稿   用瀏覽器開啟http://localhost:1313/  ，就可以看到網頁的樣子了。可以放心的更動網頁的內容，只要重新整理網頁，可以馬上看到結果。（可能需要強置重新整理瀏覽器，像是用快捷鍵 Ctrl-R，或者是清除快取。）\n產生靜態網頁 Hugo就是用指令hugo來產生網頁的：\nhugo 預設的生成結果會在mywebsite/public/，可以用-d來指定路徑，或是在設定檔config.yml中設定publishdir。\n如果要連同草稿一起產生，加上-D。\n使用hugo help知道更多詳細的參數。\n參考文件 Quick Start | Hugo  Installation | PaperMod  Build a Personal Website With Github Pages and Hugo  ","permalink":"https://kkkeevvvin.github.io/my-website-ver1/docs/posts/hugo_from_scratch/","summary":"安裝Hugo 這篇以支援snap的Linux版本為例，下載擴充版本的Hugo。\nsnap install hugo --channel=extended 其他作業系統可以到 Install Hugo | Hugo  找到相應的指示安裝。\n檢查是否安裝成功：\nhugo version  若要解除安裝：\nsnap remove hugo \n開始網頁專案 確定安裝好Hugo之後，選好要存放網頁專案的目錄，用指令\n hugo new site mywebsite -f yml  mywebsite可以替換成其他你想要的名字。 -f yml指定使用yml格式，因為yml/yaml的格式比起toml更容易閱讀，根據Papermod的作者adityatelange  的說法  ，所以以下也將採用yml的格式。如果有需要，你可以很容易的找到YML to TOML  的轉換器。   可以看到hugo幫你建立好的檔案架構如下。\nmywebsite/ ├── archetypes │ └── default.md ├── config.yml ├── content ├── data ├── layouts ├── static └── themes 選擇主題 我選擇的主題是PaperMod  ，因為這個主題裡面有很不錯的指引，也有舒服的版面設計。\n移動到mywebsite底下執行以下指令，把PaperMod的資料複製到mywebsite/themes/PaperMod。\ngit clone https://github.","title":"用Hugo製作網頁"},{"content":"最近在研究架設網站和網站設計，不定時更新。\n文章的底部都有Likebutton，如果覺得我寫的不錯有幫助到你，可以按讚給我一點支持，讓我拿到Likecoin，獲得實際收入。(｡･ω･｡)ﾉ♥\n如果沒有使用過LikeCoin  ，點擊連結免費註冊，可以用我的id kkkevin當做推薦碼。成為LikeCoin的會員，以後也能到其他地方支持你喜歡的創作者。\n如果有什麼問題歡迎留言告訴我，或是私訊我的IG  ，雖然目前IG還沒有空去經營，但是我會去收訊息的。\n也可以用RSS訂閱我的文章  ，或是在手機中將我的網站「加到主畫面」  。\n友站連結\nA小編  香瓜星球的日常  ","permalink":"https://kkkeevvvin.github.io/my-website-ver1/docs/about/","summary":"最近在研究架設網站和網站設計，不定時更新。\n文章的底部都有Likebutton，如果覺得我寫的不錯有幫助到你，可以按讚給我一點支持，讓我拿到Likecoin，獲得實際收入。(｡･ω･｡)ﾉ♥\n如果沒有使用過LikeCoin  ，點擊連結免費註冊，可以用我的id kkkevin當做推薦碼。成為LikeCoin的會員，以後也能到其他地方支持你喜歡的創作者。\n如果有什麼問題歡迎留言告訴我，或是私訊我的IG  ，雖然目前IG還沒有空去經營，但是我會去收訊息的。\n也可以用RSS訂閱我的文章  ，或是在手機中將我的網站「加到主畫面」  。\n友站連結\nA小編  香瓜星球的日常  ","title":"關於我"}]